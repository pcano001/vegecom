<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:context="http://www.springframework.org/schema/context" 
       xmlns:jee="http://www.springframework.org/schema/jee" 
       xmlns:tx="http://www.springframework.org/schema/tx" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd         http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd         http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename">
			<value>i18n.client.messages</value>
		</property>
	</bean>
	
    <bean id="serializationService" class="com.veisite.vegecom.service.impl.JsonSerializationService">
    </bean>
    
    <bean id="securityService" class="com.veisite.vegecom.service.impl.RestSecurityServiceImpl"/>
    
    <bean id="restContext" class="com.veisite.vegecom.rest.client.DefaultRestClientContext">
    	<property name="scheme" value="https"/>
    	<property name="host" value="localhost"/>
    	<property name="port" value="8443"/>
    	<property name="apiPath" value=""/>
    	<property name="restSecurityService" ref="securityService"/> 
    </bean>
    <bean id="requestFactory" class="com.veisite.vegecom.rest.client.DefaultRestClientRequestFactory">
    	<property name="context" ref="restContext"/>
    </bean>
    <bean id="daoExceptionHandler" class="com.veisite.vegecom.rest.client.dao.DAOExceptionHandler">
    	<property name="messageSource" ref="messageSource"/>
    	<property name="serializationService" ref="serializationService"/>
    </bean>
    
    <bean id="restSessionDAO" class="com.veisite.vegecom.rest.client.dao.DefaultRestSessionDAO">
    	<property name="resourcePath" value="/apiKey"/>
    	<property name="serializationService" ref="serializationService"/>
    	<property name="requestFactory" ref="requestFactory"/>
    	<property name="exceptionHandler" ref="daoExceptionHandler"/>
    </bean>
    
    <!--
        Security with Apache Shiro
    -->
    <bean id="securityManager" class="com.veisite.vegecom.rest.client.RestShiroSecurityManager">
		<property name="authenticator">
			<bean class="com.veisite.vegecom.rest.client.RestShiroAuthenticator">
				<property name="sessionDAO" ref="restSessionDAO"/>
			</bean>
		</property>
    </bean>
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	<!-- For simplest integration, so that all SecurityUtils.* methods work in all cases, -->
	<!-- make the securityManager bean a static singleton. DO NOT do this in web -->
	<!-- applications - see the 'Web Applications' section below instead. -->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
			value="org.apache.shiro.SecurityUtils.setSecurityManager" />
		<property name="arguments" ref="securityManager" />
	</bean>    


    <!--
        This declaration will cause Spring to locate every @Component,
        @Repository and @Service in your application. In practical terms this
        allows you to write a POJO and then simply annotate the new POJO as an
        @Service and Spring will automatically detect, instantiate and
        dependency inject your service at startup time. Importantly, you can
        then also have your new service injected into any other class that
        requires it simply by declaring a field for your service inside the
        relying class and Spring will inject it. Note that two exclude filters
        are declared. The first ensures that Spring doesn't spend time
        introspecting Roo-specific ITD aspects. The second ensures Roo doesn't
        instantiate your @Controller classes, as these should be instantiated
        by a web tier application context. Refer to web.xml for more details
        about the web tier application context setup services.
        
        Furthermore, this turns on @Autowired, @PostConstruct etc support. These 
        annotations allow you to use common Spring and Java Enterprise Edition 
        annotations in your classes without needing to do any special configuration. 
        The most commonly used annotation is @Autowired, which instructs Spring to
        dependency inject an object into your class.
    -->
	<context:component-scan base-package="com.veisite.vegecom"/>

    <context:annotation-config />
    
    
</beans>